#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from bm_runtime.standard import Standard
from bm_runtime.standard.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  i64 bm_mt_get_num_entries(i32 cxt_id, string table_name)')
  print('  void bm_mt_clear_entries(i32 cxt_id, string table_name, bool reset_default_entry)')
  print('  BmEntryHandle bm_mt_add_entry(i32 cxt_id, string table_name, BmMatchParams match_key, string action_name, BmActionData action_data, BmAddEntryOptions options)')
  print('  void bm_mt_set_default_action(i32 cxt_id, string table_name, string action_name, BmActionData action_data)')
  print('  void bm_mt_delete_entry(i32 cxt_id, string table_name, BmEntryHandle entry_handle)')
  print('  void bm_mt_modify_entry(i32 cxt_id, string table_name, BmEntryHandle entry_handle, string action_name, BmActionData action_data)')
  print('  void bm_mt_set_entry_ttl(i32 cxt_id, string table_name, BmEntryHandle entry_handle, i32 timeout_ms)')
  print('  BmMemberHandle bm_mt_act_prof_add_member(i32 cxt_id, string act_prof_name, string action_name, BmActionData action_data)')
  print('  void bm_mt_act_prof_delete_member(i32 cxt_id, string act_prof_name, BmMemberHandle mbr_handle)')
  print('  void bm_mt_act_prof_modify_member(i32 cxt_id, string act_prof_name, BmMemberHandle mbr_handle, string action_name, BmActionData action_data)')
  print('  BmGroupHandle bm_mt_act_prof_create_group(i32 cxt_id, string act_prof_name)')
  print('  void bm_mt_act_prof_delete_group(i32 cxt_id, string act_prof_name, BmGroupHandle grp_handle)')
  print('  void bm_mt_act_prof_add_member_to_group(i32 cxt_id, string act_prof_name, BmMemberHandle mbr_handle, BmGroupHandle grp_handle)')
  print('  void bm_mt_act_prof_remove_member_from_group(i32 cxt_id, string act_prof_name, BmMemberHandle mbr_handle, BmGroupHandle grp_handle)')
  print('   bm_mt_act_prof_get_members(i32 cxt_id, string act_prof_name)')
  print('  BmMtActProfMember bm_mt_act_prof_get_member(i32 cxt_id, string act_prof_name, BmMemberHandle mbr_handle)')
  print('   bm_mt_act_prof_get_groups(i32 cxt_id, string act_prof_name)')
  print('  BmMtActProfGroup bm_mt_act_prof_get_group(i32 cxt_id, string act_prof_name, BmGroupHandle grp_handle)')
  print('  BmEntryHandle bm_mt_indirect_add_entry(i32 cxt_id, string table_name, BmMatchParams match_key, BmMemberHandle mbr_handle, BmAddEntryOptions options)')
  print('  void bm_mt_indirect_modify_entry(i32 cxt_id, string table_name, BmEntryHandle entry_handle, BmMemberHandle mbr_handle)')
  print('  void bm_mt_indirect_delete_entry(i32 cxt_id, string table_name, BmEntryHandle entry_handle)')
  print('  void bm_mt_indirect_set_entry_ttl(i32 cxt_id, string table_name, BmEntryHandle entry_handle, i32 timeout_ms)')
  print('  void bm_mt_indirect_set_default_member(i32 cxt_id, string table_name, BmMemberHandle mbr_handle)')
  print('  BmEntryHandle bm_mt_indirect_ws_add_entry(i32 cxt_id, string table_name, BmMatchParams match_key, BmGroupHandle grp_handle, BmAddEntryOptions options)')
  print('  void bm_mt_indirect_ws_modify_entry(i32 cxt_id, string table_name, BmEntryHandle entry_handle, BmGroupHandle grp_handle)')
  print('  void bm_mt_indirect_ws_set_default_group(i32 cxt_id, string table_name, BmGroupHandle grp_handle)')
  print('  BmCounterValue bm_mt_read_counter(i32 cxt_id, string table_name, BmEntryHandle entry_handle)')
  print('  void bm_mt_reset_counters(i32 cxt_id, string table_name)')
  print('  void bm_mt_write_counter(i32 cxt_id, string table_name, BmEntryHandle entry_handle, BmCounterValue value)')
  print('  void bm_mt_set_meter_rates(i32 cxt_id, string table_name, BmEntryHandle entry_handle,  rates)')
  print('   bm_mt_get_meter_rates(i32 cxt_id, string table_name, BmEntryHandle entry_handle)')
  print('   bm_mt_get_entries(i32 cxt_id, string table_name)')
  print('  BmMtEntry bm_mt_get_entry(i32 cxt_id, string table_name, BmEntryHandle entry_handle)')
  print('  BmActionEntry bm_mt_get_default_entry(i32 cxt_id, string table_name)')
  print('  BmMtEntry bm_mt_get_entry_from_key(i32 cxt_id, string table_name, BmMatchParams match_key, BmAddEntryOptions options)')
  print('  BmCounterValue bm_counter_read(i32 cxt_id, string counter_name, i32 index)')
  print('  void bm_counter_reset_all(i32 cxt_id, string counter_name)')
  print('  void bm_counter_write(i32 cxt_id, string counter_name, i32 index, BmCounterValue value)')
  print('  void bm_learning_ack(i32 cxt_id, BmLearningListId list_id, BmLearningBufferId buffer_id,  sample_ids)')
  print('  void bm_learning_ack_buffer(i32 cxt_id, BmLearningListId list_id, BmLearningBufferId buffer_id)')
  print('  void bm_learning_set_timeout(i32 cxt_id, BmLearningListId list_id, i32 timeout_ms)')
  print('  void bm_learning_set_buffer_size(i32 cxt_id, BmLearningListId list_id, i32 nb_samples)')
  print('  void bm_load_new_config(string config_str)')
  print('  void bm_swap_configs()')
  print('  void bm_meter_array_set_rates(i32 cxt_id, string meter_array_name,  rates)')
  print('  void bm_meter_set_rates(i32 cxt_id, string meter_array_name, i32 index,  rates)')
  print('   bm_meter_get_rates(i32 cxt_id, string meter_array_name, i32 index)')
  print('  BmRegisterValue bm_register_read(i32 cxt_id, string register_array_name, i32 idx)')
  print('   bm_register_read_all(i32 cxt_id, string register_array_name)')
  print('  void bm_register_write(i32 cxt_id, string register_array_name, i32 index, BmRegisterValue value)')
  print('  void bm_register_write_range(i32 cxt_id, string register_array_name, i32 start_index, i32 end_index, BmRegisterValue value)')
  print('  void bm_register_reset(i32 cxt_id, string register_array_name)')
  print('  void bm_parse_vset_add(i32 cxt_id, string parse_vset_name, BmParseVSetValue value)')
  print('  void bm_parse_vset_remove(i32 cxt_id, string parse_vset_name, BmParseVSetValue value)')
  print('  void bm_dev_mgr_add_port(string iface_name, i32 port_num, string pcap_path)')
  print('  void bm_dev_mgr_remove_port(i32 port_num)')
  print('   bm_dev_mgr_show_ports()')
  print('  BmConfig bm_mgmt_get_info()')
  print('  void bm_set_crc16_custom_parameters(i32 cxt_id, string calc_name, BmCrc16Config crc16_config)')
  print('  void bm_set_crc32_custom_parameters(i32 cxt_id, string calc_name, BmCrc32Config crc32_config)')
  print('  void bm_reset_state()')
  print('  string bm_get_config()')
  print('  string bm_get_config_md5()')
  print('  i32 bm_get_id_from_name(i32 cxt_id, BmResourceType resource_type, string resource_name)')
  print('  string bm_serialize_state()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Standard.Client(protocol)
transport.open()

if cmd == 'bm_mt_get_num_entries':
  if len(args) != 2:
    print('bm_mt_get_num_entries requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_get_num_entries(eval(args[0]),args[1],))

elif cmd == 'bm_mt_clear_entries':
  if len(args) != 3:
    print('bm_mt_clear_entries requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_clear_entries(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_mt_add_entry':
  if len(args) != 6:
    print('bm_mt_add_entry requires 6 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_add_entry(eval(args[0]),args[1],eval(args[2]),args[3],eval(args[4]),eval(args[5]),))

elif cmd == 'bm_mt_set_default_action':
  if len(args) != 4:
    print('bm_mt_set_default_action requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_set_default_action(eval(args[0]),args[1],args[2],eval(args[3]),))

elif cmd == 'bm_mt_delete_entry':
  if len(args) != 3:
    print('bm_mt_delete_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_delete_entry(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_mt_modify_entry':
  if len(args) != 5:
    print('bm_mt_modify_entry requires 5 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_modify_entry(eval(args[0]),args[1],eval(args[2]),args[3],eval(args[4]),))

elif cmd == 'bm_mt_set_entry_ttl':
  if len(args) != 4:
    print('bm_mt_set_entry_ttl requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_set_entry_ttl(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'bm_mt_act_prof_add_member':
  if len(args) != 4:
    print('bm_mt_act_prof_add_member requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_act_prof_add_member(eval(args[0]),args[1],args[2],eval(args[3]),))

elif cmd == 'bm_mt_act_prof_delete_member':
  if len(args) != 3:
    print('bm_mt_act_prof_delete_member requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_act_prof_delete_member(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_mt_act_prof_modify_member':
  if len(args) != 5:
    print('bm_mt_act_prof_modify_member requires 5 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_act_prof_modify_member(eval(args[0]),args[1],eval(args[2]),args[3],eval(args[4]),))

elif cmd == 'bm_mt_act_prof_create_group':
  if len(args) != 2:
    print('bm_mt_act_prof_create_group requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_act_prof_create_group(eval(args[0]),args[1],))

elif cmd == 'bm_mt_act_prof_delete_group':
  if len(args) != 3:
    print('bm_mt_act_prof_delete_group requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_act_prof_delete_group(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_mt_act_prof_add_member_to_group':
  if len(args) != 4:
    print('bm_mt_act_prof_add_member_to_group requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_act_prof_add_member_to_group(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'bm_mt_act_prof_remove_member_from_group':
  if len(args) != 4:
    print('bm_mt_act_prof_remove_member_from_group requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_act_prof_remove_member_from_group(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'bm_mt_act_prof_get_members':
  if len(args) != 2:
    print('bm_mt_act_prof_get_members requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_act_prof_get_members(eval(args[0]),args[1],))

elif cmd == 'bm_mt_act_prof_get_member':
  if len(args) != 3:
    print('bm_mt_act_prof_get_member requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_act_prof_get_member(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_mt_act_prof_get_groups':
  if len(args) != 2:
    print('bm_mt_act_prof_get_groups requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_act_prof_get_groups(eval(args[0]),args[1],))

elif cmd == 'bm_mt_act_prof_get_group':
  if len(args) != 3:
    print('bm_mt_act_prof_get_group requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_act_prof_get_group(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_mt_indirect_add_entry':
  if len(args) != 5:
    print('bm_mt_indirect_add_entry requires 5 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_add_entry(eval(args[0]),args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'bm_mt_indirect_modify_entry':
  if len(args) != 4:
    print('bm_mt_indirect_modify_entry requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_modify_entry(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'bm_mt_indirect_delete_entry':
  if len(args) != 3:
    print('bm_mt_indirect_delete_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_delete_entry(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_mt_indirect_set_entry_ttl':
  if len(args) != 4:
    print('bm_mt_indirect_set_entry_ttl requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_set_entry_ttl(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'bm_mt_indirect_set_default_member':
  if len(args) != 3:
    print('bm_mt_indirect_set_default_member requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_set_default_member(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_mt_indirect_ws_add_entry':
  if len(args) != 5:
    print('bm_mt_indirect_ws_add_entry requires 5 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_ws_add_entry(eval(args[0]),args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'bm_mt_indirect_ws_modify_entry':
  if len(args) != 4:
    print('bm_mt_indirect_ws_modify_entry requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_ws_modify_entry(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'bm_mt_indirect_ws_set_default_group':
  if len(args) != 3:
    print('bm_mt_indirect_ws_set_default_group requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_indirect_ws_set_default_group(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_mt_read_counter':
  if len(args) != 3:
    print('bm_mt_read_counter requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_read_counter(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_mt_reset_counters':
  if len(args) != 2:
    print('bm_mt_reset_counters requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_reset_counters(eval(args[0]),args[1],))

elif cmd == 'bm_mt_write_counter':
  if len(args) != 4:
    print('bm_mt_write_counter requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_write_counter(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'bm_mt_set_meter_rates':
  if len(args) != 4:
    print('bm_mt_set_meter_rates requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_set_meter_rates(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'bm_mt_get_meter_rates':
  if len(args) != 3:
    print('bm_mt_get_meter_rates requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_get_meter_rates(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_mt_get_entries':
  if len(args) != 2:
    print('bm_mt_get_entries requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_get_entries(eval(args[0]),args[1],))

elif cmd == 'bm_mt_get_entry':
  if len(args) != 3:
    print('bm_mt_get_entry requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_get_entry(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_mt_get_default_entry':
  if len(args) != 2:
    print('bm_mt_get_default_entry requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_get_default_entry(eval(args[0]),args[1],))

elif cmd == 'bm_mt_get_entry_from_key':
  if len(args) != 4:
    print('bm_mt_get_entry_from_key requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_mt_get_entry_from_key(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'bm_counter_read':
  if len(args) != 3:
    print('bm_counter_read requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_counter_read(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_counter_reset_all':
  if len(args) != 2:
    print('bm_counter_reset_all requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_counter_reset_all(eval(args[0]),args[1],))

elif cmd == 'bm_counter_write':
  if len(args) != 4:
    print('bm_counter_write requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_counter_write(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'bm_learning_ack':
  if len(args) != 4:
    print('bm_learning_ack requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_learning_ack(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'bm_learning_ack_buffer':
  if len(args) != 3:
    print('bm_learning_ack_buffer requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_learning_ack_buffer(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'bm_learning_set_timeout':
  if len(args) != 3:
    print('bm_learning_set_timeout requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_learning_set_timeout(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'bm_learning_set_buffer_size':
  if len(args) != 3:
    print('bm_learning_set_buffer_size requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_learning_set_buffer_size(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'bm_load_new_config':
  if len(args) != 1:
    print('bm_load_new_config requires 1 args')
    sys.exit(1)
  pp.pprint(client.bm_load_new_config(args[0],))

elif cmd == 'bm_swap_configs':
  if len(args) != 0:
    print('bm_swap_configs requires 0 args')
    sys.exit(1)
  pp.pprint(client.bm_swap_configs())

elif cmd == 'bm_meter_array_set_rates':
  if len(args) != 3:
    print('bm_meter_array_set_rates requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_meter_array_set_rates(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_meter_set_rates':
  if len(args) != 4:
    print('bm_meter_set_rates requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_meter_set_rates(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'bm_meter_get_rates':
  if len(args) != 3:
    print('bm_meter_get_rates requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_meter_get_rates(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_register_read':
  if len(args) != 3:
    print('bm_register_read requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_register_read(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_register_read_all':
  if len(args) != 2:
    print('bm_register_read_all requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_register_read_all(eval(args[0]),args[1],))

elif cmd == 'bm_register_write':
  if len(args) != 4:
    print('bm_register_write requires 4 args')
    sys.exit(1)
  pp.pprint(client.bm_register_write(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'bm_register_write_range':
  if len(args) != 5:
    print('bm_register_write_range requires 5 args')
    sys.exit(1)
  pp.pprint(client.bm_register_write_range(eval(args[0]),args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'bm_register_reset':
  if len(args) != 2:
    print('bm_register_reset requires 2 args')
    sys.exit(1)
  pp.pprint(client.bm_register_reset(eval(args[0]),args[1],))

elif cmd == 'bm_parse_vset_add':
  if len(args) != 3:
    print('bm_parse_vset_add requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_parse_vset_add(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_parse_vset_remove':
  if len(args) != 3:
    print('bm_parse_vset_remove requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_parse_vset_remove(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_dev_mgr_add_port':
  if len(args) != 3:
    print('bm_dev_mgr_add_port requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_dev_mgr_add_port(args[0],eval(args[1]),args[2],))

elif cmd == 'bm_dev_mgr_remove_port':
  if len(args) != 1:
    print('bm_dev_mgr_remove_port requires 1 args')
    sys.exit(1)
  pp.pprint(client.bm_dev_mgr_remove_port(eval(args[0]),))

elif cmd == 'bm_dev_mgr_show_ports':
  if len(args) != 0:
    print('bm_dev_mgr_show_ports requires 0 args')
    sys.exit(1)
  pp.pprint(client.bm_dev_mgr_show_ports())

elif cmd == 'bm_mgmt_get_info':
  if len(args) != 0:
    print('bm_mgmt_get_info requires 0 args')
    sys.exit(1)
  pp.pprint(client.bm_mgmt_get_info())

elif cmd == 'bm_set_crc16_custom_parameters':
  if len(args) != 3:
    print('bm_set_crc16_custom_parameters requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_set_crc16_custom_parameters(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_set_crc32_custom_parameters':
  if len(args) != 3:
    print('bm_set_crc32_custom_parameters requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_set_crc32_custom_parameters(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'bm_reset_state':
  if len(args) != 0:
    print('bm_reset_state requires 0 args')
    sys.exit(1)
  pp.pprint(client.bm_reset_state())

elif cmd == 'bm_get_config':
  if len(args) != 0:
    print('bm_get_config requires 0 args')
    sys.exit(1)
  pp.pprint(client.bm_get_config())

elif cmd == 'bm_get_config_md5':
  if len(args) != 0:
    print('bm_get_config_md5 requires 0 args')
    sys.exit(1)
  pp.pprint(client.bm_get_config_md5())

elif cmd == 'bm_get_id_from_name':
  if len(args) != 3:
    print('bm_get_id_from_name requires 3 args')
    sys.exit(1)
  pp.pprint(client.bm_get_id_from_name(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'bm_serialize_state':
  if len(args) != 0:
    print('bm_serialize_state requires 0 args')
    sys.exit(1)
  pp.pprint(client.bm_serialize_state())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
